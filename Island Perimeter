class Solution {
    int count=0;
    public int islandPerimeter(int[][] grid) {
      int n=grid.length;
      int m=grid[0].length;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    dfs(i,j,n,m,grid);
                }
            }
        }
        return count;
    }
    void dfs(int x,int y,int n,int m,int[][] grid){
        grid[x][y]=3;
        if(x-1<0 || grid[x-1][y]==0)
            count=count+1;
        if(y-1<0 || grid[x][y-1]==0)
            count=count+1;
        if(x+1>=n || grid[x+1][y]==0)
            count=count+1;
        if(y+1>=m || grid[x][y+1]==0){
            count=count+1;
        }
        if(x-1>=0 && grid[x-1][y]==1){
            dfs(x-1,y,n,m,grid);
        }
        if(y-1>=0 && grid[x][y-1]==1){
            dfs(x,y-1,n,m,grid);
        }
        if(x+1<n && grid[x+1][y]==1){
            dfs(x+1,y,n,m,grid);
        }
        if(y+1<m && grid[x][y+1]==1){
            dfs(x,y+1,n,m,grid);
        }
        
    
    }
}
